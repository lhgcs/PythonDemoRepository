#include "mainwindow.h"
#include "managerdialog.h"
#include "ui_mainwindow.h"
#include "engineerdialog.h"
#include <QMessageBox>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QtDebug>
#include <QFile>
#include <QTextStream>
#include "configure.h"
#include "filewr.h"
#include "json.h"
#include "cJSON.h"
#include <time.h>
#include "uart.h"
#include "UartQrcode.h"
#include "UartIC.h"

//#include <sys/time.h>
//#include <QTextCodec>
//#include <QIcon>

#include <QtWebKit/QtWebKit>
#include <QtWebKit/QWebView>
#include <QUrl>

void customMessageHandler(QtMsgType type, const char *msg)
{
    QString txt;
    switch (type)
    {
        //调试信息提示
        case QtDebugMsg:
           txt = QString("Debug: %1").arg(msg);
           break;
        //一般的warning提示
        case QtWarningMsg:
           txt = QString("Warning: %1").arg(msg);
           break;
       //严重错误提示
       case QtCriticalMsg:
           txt = QString("Critical: %1").arg(msg);
           break;
       //致命错误提示
       case QtFatalMsg:
            txt = QString("Fatal: %1").arg(msg);
            abort();
            break;
       default:
            break;
   }
   QFile outFile("/root/kuaidi_config/debuglog.txt");//mnt
   outFile.open(QIODevice::ReadWrite | QIODevice::Append);
   QTextStream ts(&outFile);
   //ts.setCodec("utf-8");
   ts << txt << endl;
}

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    this->setCursor(Qt::BlankCursor); //隐藏鼠标
    this->setStyleSheet("#MainWindow{background-image:url(/kuaidi_source/res/welcome.png);}");

    ui->LineEditPwd->setStyleSheet("#LineEditPwd{border:0px groove gray;border-radius:10px;padding-left:5px;padding-top:5px;background-color:rgba(255,255,255,200);}");
    ui->Button1->setStyleSheet("#Button1{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button1:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button2->setStyleSheet("#Button2{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button2:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button3->setStyleSheet("#Button3{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button3:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button4->setStyleSheet("#Button4{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button4:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button5->setStyleSheet("#Button5{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button5:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button6->setStyleSheet("#Button6{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button6:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button7->setStyleSheet("#Button7{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button7:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button8->setStyleSheet("#Button8{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button8:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button9->setStyleSheet("#Button9{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button9:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->Button0->setStyleSheet("#Button0{border:none;border-radius:12px;background-color:rgba(255,255,255,200); }" "#Button0:pressed{background-color:rgb(0,255,127);color:white;}");
    //ui->ButtonCancel->setStyleSheet("#ButtonCancel{border:none;border-radius:12px;background-color:white;background-image:url(/kuaidi_source/res/Cancel.png);}");
    //ui->ButtonEnter->setStyleSheet("#ButtonEnter{border:none;border-radius:12px;background-color:white;background-image:url(/kuaidi_source/res/OK.png);}");

    ui->ButtonCancel->setStyleSheet("#ButtonCancel{border:none;border-radius:12px;background-color:rgba(255,255,255,200);}" "#ButtonCancel:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->ButtonEnter->setStyleSheet("#ButtonEnter{border:none;border-radius:12px;background-color:rgba(255,255,255,200);}""#ButtonEnter:pressed{background-color:rgb(0,255,127);color:white;}");
    ui->ButtonEnter->setShortcut(QKeySequence::InsertParagraphSeparator);//设置快捷键为键盘的“回车”键

    //ui->LineEditPwd->setText("请输入密码");
    this->msgtimer = new QTimer(this);
    this->msgBox=new myDialog();
    this->msgBox->setAttribute(Qt::WA_TranslucentBackground);//设置窗口背景透明
    this->msgBox->setWindowFlags(Qt::FramelessWindowHint);   //设置无边框窗口

    this->manager = new QNetworkAccessManager(this);
    this->request = new QNetworkRequest;
    this->reply =NULL;
    this->requestTimer=new QTimer(this);

    connect(this->msgtimer,SIGNAL(timeout()),this,SLOT(msgTimeout()));
    connect(this->manager, SIGNAL(finished(QNetworkReply*)), this, SLOT(replyFinished(QNetworkReply*)));
    connect(this->requestTimer, SIGNAL(timeout()),this, SLOT(requestTimeout()));

   // UartQrcode *uart_qrcode=new UartQrcode();
   // uart_qrcode->start();//多线程，调用run
		
    UartIC *uart_ic=new UartIC();
    uart_ic->start();

    this->view=new QWebView(this);                         //没有this，另开一个窗口
    this->view->setWindowFlags(Qt::FramelessWindowHint);   //设置无边框窗口
    this->view->resize(768,1360);
    this->viewTimer=new QTimer(this);
    this->viewTimer->setSingleShot(true);
    connect(this->viewTimer, SIGNAL(timeout()),this, SLOT(viewTimerout()));
    connect(this->view, SIGNAL(selectionChanged()),this, SLOT(viewNotShow()));
    connect(this->view,SIGNAL(loadFinished(bool)),this,SLOT(viewShow(bool)));

    qInstallMsgHandler(customMessageHandler);
    this->view->close();
    this->viewTimer->start(30000);
    ui->LineEditPwd->setFocus();                          //输入框获得焦点
}

MainWindow::~MainWindow()
{
    delete ui;
}
void MainWindow::DispPwd(QString c)//输入框显示
{
    if(c == NULL)
    {
        this->ui->LineEditPwd->setText("");
    }
    else
    {
        this->ui->LineEditPwd->setText(this->ui->LineEditPwd->text().append(c));
    }
    this->ui->LineEditPwd->setFocus();
}

void MainWindow::on_Button1_clicked()
{
    DispPwd("1");
}
void MainWindow::on_Button2_clicked()
{
    DispPwd("2");
}
void MainWindow::on_Button3_clicked()
{
    DispPwd("3");
}
void MainWindow::on_Button4_clicked()
{
    DispPwd("4");
}
void MainWindow::on_Button5_clicked()
{
    DispPwd("5");
}
void MainWindow::on_Button6_clicked()
{
    DispPwd("6");
}
void MainWindow::on_Button7_clicked()
{
    DispPwd("7");
}
void MainWindow::on_Button8_clicked()
{
    DispPwd("8");
}
void MainWindow::on_Button9_clicked()
{
     DispPwd("9");
}
void MainWindow::on_Button0_clicked()
{
    DispPwd("0");
}
void MainWindow::on_ButtonCancel_clicked()
{
      DispPwd(NULL);
}

void MainWindow::replyFinished(QNetworkReply* reply)//数据下载完成后进行处理，解析，开箱
{
    if(this->requestTimer->isActive())//下载定时器关闭
    {
        this->requestTimer->stop();
    }
    QByteArray data = reply->readAll();
    reply->close();      //关闭请求
    reply->deleteLater();//释放reply对象
    this->reply=NULL;

    QString str=QByteArray(data);
    str.replace("\n","");
    QByteArray ba = str.toUtf8();
    char *text = ba.data();

    char logger[200];
    int result=2;
    memset(logger, 0x0, sizeof(logger));

    cJSON* pArray = cJSON_CreateArray();
    cJSON *json;
	
    time_t timep;
    json=cJSON_Parse(text);//字符串解析成json结构体,NULL错误

    if (!json) 
    {
        printf("json error\n");
        sprintf(logger, "DateTime:%s, Password:%s, Error before:[%s]\n", ctime(&timep),  (this->pwd.toLatin1()).data(), cJSON_GetErrorPtr());
        printf("%s\n", logger);
        qDebug(logger);
        if(this->msgtimer->isActive())
        {
            this->msgtimer->stop();
        }
        this->msgBox->setText("服务器正在维护，请稍后再取件");
    }
    else
    {
        printf("json ok\n");
        sprintf(logger, "mainwindow     DateTime:%s, password:%s, JSON item:%s\n", ctime(&timep),//将timep转换为真是世界的时间，以字符串显示
                    (this->pwd.toLatin1()).data(), (str.toLatin1()).data());
        printf("%s\n", logger);
        qDebug(logger);
			
        result = cJSON_GetObjectItem(json, "result")->valueint;//获取result的值
        if(result==1)
        {
            printf("result==1\n");
            pArray = cJSON_GetObjectItem(json, "lockRoom");    //获取lockRoom变量的指针
            if (NULL == pArray)
            {
                return;
            }

            int iCount = cJSON_GetArraySize(pArray);           //获取pArray数组的大小
            for (int i = 0; i < iCount; ++i)
            {
                cJSON* pItem = cJSON_GetArrayItem(pArray, i);
                if (NULL == pItem)
                {
                    continue;
                }

                char* lockRoomId = cJSON_GetObjectItem(pItem, "lockRoomId")->valuestring;
                char* boxId = cJSON_GetObjectItem(pItem, "boxIds")->valuestring;
                char* errMsg = cJSON_GetObjectItem(json, "errMsg")->valuestring;
                if(this->msgtimer->isActive())
                {
                    this->msgtimer->stop();
                }
                this->msgBox->setText(QString::fromUtf8(errMsg));

                sprintf(logger, "DateTime:%s, password:%s, open the box:lockRoomId=%d, boxId=%d\n",
                         ctime(&timep), (this->pwd.toLatin1()).data(), lockRoomId, boxId);
                qDebug(logger);
                uart_ctrl(atoi(lockRoomId), atoi(boxId));//开箱操作
             }
         }
         else
         {
            printf("result==2\n");
            char* errMsg = cJSON_GetObjectItem(json, "errMsg")->valuestring;
            if(this->msgtimer->isActive())
            {
                this->msgtimer->stop();
            }
            this->msgBox->setText(QString::fromUtf8(errMsg));

            sprintf(logger, "DateTime:%s, password:%s, errMsg:%s\n", ctime(&timep),
                    (this->pwd.toLatin1()).data(), errMsg);
            qDebug(logger);
         }
     }
     if((msgBox->text())!=NULL)
     {
         this->msgBox->show();
         this->msgtimer->start(10000);
     }
   // cJSON_Delete(json);//原来没有 // 释放内存空间
}

void MainWindow::on_ButtonEnter_clicked()//密码开箱，发送数据
{
    if(this->view->isVisible())//浏览器可见
    {
        this->view->close();
        DispPwd(NULL);
    }
    else
    {
        this->viewTimer->stop();

        this->ui->LineEditPwd->setReadOnly(true);
        this->pwd=this->ui->LineEditPwd->text();

        FileWR *fr_admin = new FileWR();
        QString admin = fr_admin->Read("/kuaidi_config/admin_pwd.txt");//opt
        time_t timep;
        time (&timep);
        char logger[200];
        sprintf(logger, "DateTime:%s, Enter system by password:%s\n",ctime(&timep), (this->pwd.toLatin1()).data());
        qDebug(logger);
        printf("%s\n",logger);

        if(this->ui->LineEditPwd->text()==admin)    //系统设置
        {
            EngineerDialog* engineerDlg =new EngineerDialog(this);
            engineerDlg->setWindowFlags(Qt::SubWindow);
            engineerDlg->setFixedSize(768, 320);
            engineerDlg->move(0, 250);
            engineerDlg->show();
            qDebug(logger);
        }
        else if(this->ui->LineEditPwd->text()==NULL)//密码为空
        {
            if(this->msgtimer->isActive())
            {
                this->msgtimer->stop();
            }
            this->msgBox->setText("请输入密码");
            this->msgBox->show();
            this->msgtimer->start(10000);
        }
        else                                        //发送密码
        {
            if((this->reply!=NULL)&&(this->reply->isRunning()))//上一个请求没完成就关闭它
            {
                this->reply->close();      //关闭请求
   